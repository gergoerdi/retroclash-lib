name:                retroclash-lib
version:             0.1.2.2
category:            Hardware
synopsis:            Code shared across the code samples in the book "Retrocomputing with Clash"
description: |
  Clash components useful when implementing, or interfacing with,
  retro-computers:
    
    * UART
    
    * Multi-digit seven-segment display driver
    
    * Keypad matrix scanner
    
    * PS/2 keyboard driver
    
    * VGA signal generator

    * Video coordinate transformers
    
    * A framework for monadic CPU descriptions
    
    * Address maps
    
    * Various small utilities
    
homepage:            https://unsafePerform.IO/retroclash/
github:              gergoerdi/retroclash-lib
license:             MIT
author:              Gergő Érdi
maintainer:          gergo@erdi.hu
copyright:           2021 Gergő Érdi


dependencies:
  - base >= 4.14 && < 5
  - clash-prelude ^>= 1.4.2 || ^>= 1.6.1 || ^>= 1.8.1
  - clash-lib  ^>= 1.4.2 || ^>= 1.6.1 || ^>= 1.8.1
  - clash-ghc ^>= 1.4.2 || ^>= 1.6.1 || ^>= 1.8.1
  - ghc-typelits-natnormalise
  - ghc-typelits-extra
  - ghc-typelits-knownnat

  - mtl
  - transformers
  - barbies ^>= 2.0.1
  - lens
  - containers
  - template-haskell
  - th-orphans >= 0.13.11
  - lift-type ^>= 0.1
  - monoidal-containers ^>= 0.6

source-dirs:
  - src

# For compatibility with GHC 9.6 some packages need to be specified as ghc-options
# Check if they are installed using:
#
# stack exec -- ghc-pkg find-module GHC.TypeLits.Extra.Solver
# (repeat the above for other plugins) 
#
# If not found, build them:
#
# stack build ghc-tcplugins-extra-0.4.5
# stack build ghc-typelits-natnormalise-0.7.9
# stack build ghc-typelits-knownnat-0.7.10
# stack build ghc-typelits-extra-0.4.6
# 
# Then run the above ghc-pkh find module command again to see where the packages are built, and then register them using:
# ghc-pkg -v register <pakage path>/ghc-tcplugins-extra-0.4.5-LoPBimuwmAgCj5M5ykKFtm.conf
# ghc-pkg -v register <pakage path>/ghc-typelits-natnormalise-0.7.9-2LocrQy3VVV7lBggmw970k.conf
# ghc-pkg -v register <pakage path>/ghc-typelits-knownnat-0.7.10-fJlMrMNkyh9qGWAkYZ6O6.conf
# ghc-pkg -v register <pakage path>/ghc-typelits-extra-0.4.6-L6c8cgcuJuRHcCyvlVGpAw.conf
ghc-options:
  -package ghc-typelits-extra
  -package ghc-typelits-natnormalise
  -package ghc-typelits-knownnat
  -fexpose-all-unfoldings -fno-worker-wrapper
  -fplugin GHC.TypeLits.KnownNat.Solver
  -fplugin GHC.TypeLits.Normalise
  -fplugin GHC.TypeLits.Extra.Solver

# Anything that Clash uses by default should go here
default-extensions:
  - BinaryLiterals
  - ConstraintKinds
  - DataKinds
  - DeriveAnyClass
  - DeriveGeneric
  - DeriveLift
  - DerivingStrategies
  - ExplicitForAll
  - ExplicitNamespaces
  - FlexibleContexts
  - FlexibleInstances
  - KindSignatures
  - MagicHash
  - MonoLocalBinds
  - NoImplicitPrelude
  - NoMonomorphismRestriction
  - NoStarIsType
  - NoStrictData
  - NoStrict
  - QuasiQuotes
  - ScopedTypeVariables
  - TemplateHaskellQuotes
  - TemplateHaskell
  - TypeApplications
  - TypeFamilies
  - TypeOperators

library:
  exposed-modules:
    - RetroClash.Utils
    - RetroClash.Clock
    - RetroClash.Barbies
    - RetroClash.Keypad
    - RetroClash.SevenSegment
    - RetroClash.SerialRx
    - RetroClash.SerialTx
    - RetroClash.I2C
    - RetroClash.VGA
    - RetroClash.Video
    - RetroClash.CPU
    - RetroClash.Delayed
    - RetroClash.Stack
    - RetroClash.BCD
    - RetroClash.Port
    - RetroClash.PS2
    - RetroClash.PS2.ASCII
    - RetroClash.Memory
